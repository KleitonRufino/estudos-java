package br.com.java8.data;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class CoreData {

	static class InformacoesData {

		private long anos;
		private long mes;
		private long dias;

		public InformacoesData(int anos, int mes, int dias) {
			this.anos = anos;
			this.mes = mes;
			this.dias = dias;

		}

		public long getAnos() {
			return anos;
		}

		public long getMes() {
			return mes;
		}

		public long getDias() {
			return dias;
		}
	}

	enum FormatosData {
		DD_MM_YYYY("dd/MM/yyyy");
		private String formato;

		private FormatosData(String formato) {
			this.formato = formato;
		}

		@Override
		public String toString() {
			return this.formato;
		}
	}

	public static InformacoesData diferencaEntreDatas(Date dataMaisAntiga, Date dataMaisRecente) {
		Period periodo = Period.between(dataMaisAntiga.toLocalDate(), dataMaisRecente.toLocalDate());
		return new InformacoesData(periodo.getYears(), periodo.getMonths(), periodo.getDays());
	}

	public static long obterAnosTotaisNaDiferencaEntreDatas(Date dataMaisAntiga, Date dataMaisRecente) {
		return ChronoUnit.YEARS.between(dataMaisAntiga.toLocalDate(), dataMaisRecente.toLocalDate());
	}

	public static long obterMesesTotaisNaDiferencaEntreDatas(Date dataMaisAntiga, Date dataMaisRecente) {
		return ChronoUnit.YEARS.between(dataMaisAntiga.toLocalDate(), dataMaisRecente.toLocalDate());
	}

	public static long obterDiasTotaisNaDiferencaEntreDatas(Date dataMaisAntiga, Date dataMaisRecente) {
		return ChronoUnit.DAYS.between(dataMaisAntiga.toLocalDate(), dataMaisRecente.toLocalDate());
	}

	public static Boolean validarDataInicioETermino(Date dataMaisAntiga, Date dataMaisRecente) {
		return dataMaisAntiga.toLocalDate().isBefore(dataMaisRecente.toLocalDate()) == true ? true : false;
	}

	public static String obterDataFormatada(Date data, CoreData.FormatosData formato) throws DateTimeException {
		return data.toLocalDate().format(DateTimeFormatter.ofPattern(formato.toString()));
	}

	public static Date criarData(int ano, int mes, int dia) throws DateTimeException {
		return Date.valueOf(LocalDate.of(ano, mes, dia));
	}

	public static Date modificarDataPeloAno(Date data, int ano) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().withYear(ano));
	}

	public static Date modificarDataPeloMes(Date data, int mes) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().withMonth(mes));
	}

	public static Date modificarDataPeloDia(Date data, int dia) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().withDayOfMonth(dia));
	}

	public static Date acrescentarAnosAData(Date data, int ano) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().plusYears(ano));
	}

	public static Date acrescentarMesesAData(Date data, int mes) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().plusMonths(mes));
	}

	public static Date acrescentarDiasAData(Date data, int dias) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().plusDays(dias));
	}

	public static Date subtrairAnosAData(Date data, int ano) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().minusYears(ano));
	}

	public static Date subtrairMesesAData(Date data, int mes) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().minusMonths(mes));
	}

	public static Date subtrairDiasAData(Date data, int dias) throws DateTimeException {
		return Date.valueOf(data.toLocalDate().minusDays(dias));
	}

	public static Timestamp juntarDataETempo(Date data, Time time) {
		return Timestamp.from(data.toLocalDate().atTime(time.toLocalTime()).toInstant(ZoneOffset.ofHours(0)));
	}

	public static Boolean validarData(Date data) {
		try {
			LocalDate.of(data.toLocalDate().getYear(), data.toLocalDate().getMonth(),
					data.toLocalDate().getDayOfMonth());
		} catch (DateTimeException e) {
			return false;
		}

		return true;
	}

	public static Boolean validarData(int ano, int mes, int dia) {
		try {
			LocalDate.of(ano, Month.of(mes), dia);
		} catch (DateTimeException e) {
			return false;
		}
		return true;
	}

	public static Date obterDataAtual() {
		return Date.valueOf(LocalDate.now());
	}

	public static Date converterParaDateSql(LocalDate data) {
		return Date.valueOf(data);
	}

	public static Date converterParaDateSql(java.util.Date data) {
		return new Date(data.getTime());
	}

	public static java.util.Date converterParaDateUtil(LocalDate data) {
		return Date.from(data.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());

	}

	public static java.util.Date converterParaDateUtil(Date data) {
		return new java.util.Date(data.getTime());
	}

	public static LocalDate converterParaLocalDate(Date data) {
		return data.toLocalDate();
	}

	public static LocalDate converterParaLocalDate(java.util.Date data) {
		return Instant.ofEpochMilli(data.getTime()).atZone(ZoneId.systemDefault()).toLocalDate();

	}

	public static StringBuilder apresentarMensagem(InformacoesData informacoesData, Boolean mostrarIdadeCompleta) {
		StringBuilder stringDeApresentacao = new StringBuilder();
		if (mostrarIdadeCompleta) {
			if (informacoesData.getAnos() > 1) {
				stringDeApresentacao.append(informacoesData.getAnos()).append(" ").append("anos").append(" ");
			} else if (informacoesData.getAnos() == 1) {
				stringDeApresentacao.append(informacoesData.getAnos()).append(" ").append("ano").append(" ");
			}
			if (informacoesData.getMes() > 1) {
				stringDeApresentacao.append(informacoesData.getMes()).append(" ").append("meses").append(" ");
			} else if (informacoesData.getMes() == 1) {
				stringDeApresentacao.append(informacoesData.getMes()).append(" ").append("mês").append(" ");
			}
			if (informacoesData.getDias() > 1) {
				stringDeApresentacao.append(informacoesData.getDias()).append(" ").append("dias").append(" ");
			} else if (informacoesData.getDias() == 1) {
				stringDeApresentacao.append(informacoesData.getDias()).append(" ").append("dia").append(" ");
			}
		} else {
			if (informacoesData.getAnos() > 1) {
				stringDeApresentacao.append(informacoesData.getAnos()).append(" ").append("anos");
			} else if (informacoesData.getAnos() == 1) {
				stringDeApresentacao.append(informacoesData.getAnos()).append(" ").append("ano");
			} else if (informacoesData.getMes() > 1) {
				stringDeApresentacao.append(informacoesData.getMes()).append(" ").append("meses");
			} else if (informacoesData.getMes() > 1) {
				stringDeApresentacao.append(informacoesData.getMes()).append(" ").append("meses");
			} else if (informacoesData.getMes() == 1) {
				stringDeApresentacao.append(informacoesData.getMes()).append(" ").append("mês");
			} else if (informacoesData.getDias() > 1) {
				stringDeApresentacao.append(informacoesData.getDias()).append(" ").append("dias");
			} else if (informacoesData.getDias() == 1) {
				stringDeApresentacao.append(informacoesData.getDias()).append(" ").append("dia");
			}
		}
		return stringDeApresentacao;
	}
